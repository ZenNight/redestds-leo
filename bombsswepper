import random
import tkinter as tk
from tkinter import messagebox

class MinesweeperGUI:
    def __init__(self, master, width=10, height=10, num_mines=15):
        self.master = master
        self.width = width
        self.height = height
        self.num_mines = num_mines
        self.first_click = True
        
        # Estado do jogo
        self.mines = set()
        self.revealed = set()
        self.flagged = set()
        self.game_over = False
        
        # Criar botões
        self.buttons = {}
        self.create_widgets()
        
    def create_widgets(self):
        # Criar menu
        menubar = tk.Menu(self.master)
        self.master.config(menu=menubar)
        
        game_menu = tk.Menu(menubar, tearoff=0)
        game_menu.add_command(label="Novo Jogo", command=self.reset_game)
        game_menu.add_command(label="Sair", command=self.master.quit)
        menubar.add_cascade(label="Jogo", menu=game_menu)
        
        # Criar grade de botões
        for y in range(self.height):
            for x in range(self.width):
                btn = tk.Button(
                    self.master,
                    text='',
                    width=2,
                    height=1,
                    command=lambda x=x, y=y: self.on_click(x, y)
                )
                btn.bind('<Button-3>', lambda event, x=x, y=y: self.on_right_click(x, y))
                btn.grid(row=y, column=x)
                self.buttons[(x, y)] = btn
    
    def reset_game(self):
        self.first_click = True
        self.mines = set()
        self.revealed = set()
        self.flagged = set()
        self.game_over = False
        
        for (x, y), btn in self.buttons.items():
            btn.config(text='', state=tk.NORMAL, bg='SystemButtonFace')
    
    def place_mines(self, first_x, first_y):
        # Gerar todas as posições possíveis, exceto o primeiro clique
        possible_positions = [
            (x, y) 
            for x in range(self.width) 
            for y in range(self.height) 
            if (x, y) != (first_x, first_y)
        ]
        
        # Selecionar posições das minas aleatoriamente
        self.mines = set(random.sample(possible_positions, self.num_mines))
    
    def count_adjacent_mines(self, x, y):
        count = 0
        for dx in [-1, 0, 1]:
            for dy in [-1, 0, 1]:
                if dx == 0 and dy == 0:
                    continue
                nx, ny = x + dx, y + dy
                if 0 <= nx < self.width and 0 <= ny < self.height:
                    if (nx, ny) in self.mines:
                        count += 1
        return count
    
    def reveal(self, x, y):
        if (x, y) in self.revealed or (x, y) in self.flagged or self.game_over:
            return
        
        if self.first_click:
            self.place_mines(x, y)
            self.first_click = False
        
        if (x, y) in self.mines:
            self.game_over = True
            self.reveal_all_mines()
            messagebox.showinfo("Fim de Jogo", "Você acertou uma mina!")
            return
        
        self.revealed.add((x, y))
        count = self.count_adjacent_mines(x, y)
        
        btn = self.buttons[(x, y)]
        btn.config(state=tk.DISABLED, relief=tk.SUNKEN)
        
        if count > 0:
            btn.config(text=str(count))
            # Definir cores diferentes para os números
            colors = ['', 'blue', 'green', 'red', 'darkblue', 
                     'brown', 'cyan', 'black', 'gray']
            btn.config(fg=colors[count])
        else:
            # Revelar células adjacentes recursivamente
            for dx in [-1, 0, 1]:
                for dy in [-1, 0, 1]:
                    if dx == 0 and dy == 0:
                        continue
                    nx, ny = x + dx, y + dy
                    if 0 <= nx < self.width and 0 <= ny < self.height:
                        self.reveal(nx, ny)
        
        # Verificar vitória
        if len(self.revealed) == self.width * self.height - self.num_mines:
            self.game_over = True
            messagebox.showinfo("Parabéns!", "Você venceu!")
    
    def reveal_all_mines(self):
        for (x, y) in self.mines:
            btn = self.buttons[(x, y)]
            btn.config(text='*', bg='red', state=tk.DISABLED)
    
    def on_click(self, x, y):
        self.reveal(x, y)
    
    def on_right_click(self, x, y):
        if (x, y) in self.revealed or self.game_over:
            return
        
        if (x, y) in self.flagged:
            self.flagged.remove((x, y))
            self.buttons[(x, y)].config(text='')
        else:
            self.flagged.add((x, y))
            self.buttons[(x, y)].config(text='F', fg='red')
    
    def run(self):
        self.master.mainloop()

def main():
    root = tk.Tk()
    root.title("Campo Minado")
    game = MinesweeperGUI(root, width=10, height=10, num_mines=15)
    game.run()

if __name__ == "__main__":
    main()
